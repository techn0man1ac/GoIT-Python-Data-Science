'''
В даному конкретному випадку використання str.maketrans()
для створенняcтаблиці перекладу не буде таким же ефективним, 
як вручну створена таблиця перекладу. Для створення таблиці 
ми використаємо словник MAP. Для цього ми використовуємо 
zip(symbols, code), який створює пари символ-двійковий код.
'''

symbols = "0123456789ABCDEF"
code = [
        '0000', '0001', '0010', '0011', '0100', '0101', '0110', '0111',
        '1000', '1001', '1010', '1011', '1100', '1101', '1110', '1111'
        ]

MAP = {}

for s, c in zip(symbols, code): # "Зшивання" словника "MAP"
    MAP[ord(s)] = c
    MAP[ord(s.lower())] = c
'''
Після "зшивання" фукнцією zip() сформувався ось такий словник
MAP = {48: '0000', 49: '0001', 50: '0010', 51: '0011', 52: '0100', 
       53: '0101', 54: '0110', 55: '0111', 56: '1000', 57: '1001', 
       65: '1010', 97: '1010', 66: '1011', 98: '1011', 67: '1100', 
       99: '1100', 68: '1101', 100: '1101', 69: '1110', 101: '1110', 
       70: '1111', 102: '1111'}
'''
result = "34 DF 56 AC Ff a0 00".translate(MAP)
print(result)
# 00110100 11011111 01010110 10101100 11111111 10100000 

'''
 Функція ord() в Python - це вбудована функція, яка 
 використовується для отримання Unicode коду символу. 
 Коли ви працюєте з текстом в Python, кожен символ 
 у рядку має відповідний числовий код - Unicode. 
 Функція ord() приймає символ і повертає його 
 Unicode код, який є цілим числом
'''